{"componentChunkName":"component---src-templates-blog-post-js","path":"/2019/11/21/213847/","result":{"data":{"site":{"siteMetadata":{"title":"なにもわからない"}},"markdownRemark":{"id":"26240d8e-b1e1-5fbb-b468-eff1aa061b19","excerpt":"macOS 環境が無料で CI が回せる時代になりましたね。16インチ MacBook Pro を買ったこともあって GitHub Actions で macOS 向け dotfiles…","html":"<p>macOS 環境が無料で CI が回せる時代になりましたね。16インチ MacBook Pro を買ったこともあって GitHub Actions で macOS 向け dotfiles をテスト＆見直ししてみました。\n案の定動かない処理もあったりして、やはりテストを定常的に回すのは効くなと思い知らされましたが、それにもいくつかハマりどころがあったので書いておこうと思います。</p>\n<blockquote>\n<p>環境構築スクリプトを育てていると、どうしても今のPCの環境には適用できるけれど実は新規PCには適用できなくなっているということは起きてしまいます。まっさらな状態からセットアップすることはめったにありませんからね。具体的にはディレクトリのないところにsymlinkを貼るとか、セットアップの前の方で入れているツールを後の方で使っているのだけどPATHが通っていないとか、そういうケースです。</p>\n<p>そこでCIを回しましょうという話です。最近、GitHub Actionsのmacos-latestでCIを回すようになりました。実際にCIを回したら、必要なディレクトリを作るのを忘れていたり、諸々通らないことが発覚しました。</p>\n</blockquote>\n<p>[https://itchyny.hatenablog.com/entry/2019/11/18/120000:embed:cite]</p>\n<p>現状の設定ファイルを先に貼っておくと、こうなりました。</p>\n<p>[https://gist.github.com/19c3748e2e4917c2f13d26dc4b71cda6:embed#gist19c3748e2e4917c2f13d26dc4b71cda6]</p>\n<p>リポジトリと作業の様子はこちらです。</p>\n<ul>\n<li><a href=\"https://github.com/tamakiii/dotfiles/tree/6fd099b57646a69fb0ffb44fba541b9464b1c1ec\">https://github.com/tamakiii/dotfiles/tree/6fd099b57646a69fb0ffb44fba541b9464b1c1ec</a></li>\n<li><a href=\"https://github.com/tamakiii/dotfiles/pull/9\">https://github.com/tamakiii/dotfiles/pull/9</a></li>\n</ul>\n<h2>1. GitHub 上で YAML ファイルを initialize する</h2>\n<p>[f:id:tamakiii:20191121211312p:plain]</p>\n<p>画面上から YAML ファイルが作れて PR も作れます。とりあえず PR を作ればテンションが上がるのでとりあえず作るといいと思います。\n自分は <code class=\"language-text\">Set up a workflow yourself</code> から始めました。</p>\n<p>[https://help.github.com/ja/actions/automating-your-workflow-with-github-actions/about-github-actions:embed:cite]</p>\n<h2>2. デフォルトで HomeBrew やいくつかのパッケージがインストールされている</h2>\n<p>これは dotfiles をテストする目的ではあまり嬉しくないことですが、デフォルトで HomeBrew や git, node などがインストールされていました。\nちょっと困ったのが、Brewfile で <code class=\"language-text\">brew node</code> をインストールさせたい場合、<code class=\"language-text\">brew node@12</code> と <code class=\"language-text\">brew @node13</code> が衝突してコケてしまいました。\nこれはメインのスクリプトを動かす前にデフォルトでインストールされている node をアンインストールすることで回避しました。（<code class=\"language-text\">brew uninstall node@12</code>）</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">==&gt; Downloading https://homebrew.bintray.com/bottles/node-13.1.0.catalina.bottle.tar.gz\n==&gt; Downloading from https://akamai.bintray.com/58/5863d08b039c44d35a8343179cf93d495e1288efe2c669ccb77704a236e0e17b?__gda__=exp=1574272109~hmac=9967f775a1b5093bc37183b749e04921790fe0894fdec9d213efacd13b9c6ac8&amp;response-content-disposition=attachment%3Bfilename%3D%22node-13.1.0.catalina.bottle.tar.gz%22&amp;response-content-type=application%2Fgzip&amp;requestInfo=U2FsdGVkX1-HgyW49y3C7roMUH2e6Ay__vYCfMAjNkaXbnNPwYSBlYuywDo6KSDP77-xzhgl2poWSbWyOqlhQXdPRm-Heaa85s3o5DAWzDspCV12Yu3lCCUO08p1ocfNZMtoImL1AsiYZ7xjt1rbgQ&amp;response-X-Checksum-Sha1=7352019f912696f10f9cf7feaaad9c0e2666894f&amp;response-X-Checksum-Sha2=5863d08b039c44d35a8343179cf93d495e1288efe2c669ccb77704a236e0e17b\n==&gt; Pouring node-13.1.0.catalina.bottle.tar.gz\nError: The `brew link` step did not complete successfully\nThe formula built, but is not symlinked into /usr/local\nCould not symlink bin/node\nTarget /usr/local/bin/node\nis a symlink belonging to node@12. You can unlink it:\n  brew unlink node@12\n\nTo force the link and overwrite all conflicting files:\n  brew link --overwrite node\n\nTo list all files that would be deleted:\n  brew link --overwrite --dry-run node\n\nPossible conflicting files are:\n/usr/local/bin/node -&gt; /usr/local/Cellar/node@12/12.13.0/bin/node</code></pre></div>\n<h2>3. キャッシュの有効サイズは 400MB</h2>\n<p>ライフサイクルはこのようになっているので、Workflow が成功するまではキャッシュが有効になりません。</p>\n<ul>\n<li>ロックファイルからキャッシュキーを生成する（今回は <code class=\"language-text\">${{ hashFiles(&#39;Brewfile&#39;) }}</code>）</li>\n<li>キャッシュキーからキャッシュの有無を探す</li>\n<li>Workflow が成功したらポストプロセスが動いてキャッシュを圧縮して保存する</li>\n</ul>\n<p>またキャッシュされる最大サイズは 400MB で、これを超えるとポストプロセスでキャッシュが保存されなくなります。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">/usr/bin/tar -cz -f /Users/runner/runners/2.160.2/work/_temp/430ca3b6-c547-4cda-ae16-a5e6e998894c/cache.tgz -C /usr/local/Cellar .\n##[warning]Cache size of ~722 MB (757155145 B) is over the 400MB limit, not saving cache.</code></pre></div>\n<p>HomeBrew の場合、キャッシュ対象はざっと見た感じ2つあり、ひとつが <code class=\"language-text\">$(brew --cache)/downloads</code> = <code class=\"language-text\">~/Library/Caches/Homebrew/downloads</code>、もうひとつが <code class=\"language-text\">/usr/local/Cellar</code> です。\n前者は install プロセスはスキップできませんが、download プロセスがスキップできます。ただし、40行ほどの内容でも 900MB 近くなってしまったため、post プロセスで保存される前にファイルサイズの大きいものから10件ほど削除することでキャッシュを効かせました。</p>\n<p>[https://gist.github.com/tamakiii/9f06da5772b20bf514219a6136eb6238:embed:cite]</p>\n<p>後者の <code class=\"language-text\">/usr/local/Cellar</code> なら 400MB を下回ってくれるのでは、と思いましたがこれも 700MB 超えでそのままではキャッシュに乗りませんでした。\nキャッシュを効かせても Workflow ごとに5分ほどの実行時間を要しているので、あまりキャッシュは有効に使えなそうな雰囲気があります。</p>\n<h2>4. brew install が <code class=\"language-text\">Host key verification failed.</code> で死ぬ</h2>\n<p><code class=\"language-text\">main.yml</code> から <code class=\"language-text\">make -f brew.mk</code> を叩き、<code class=\"language-text\">brew.mk</code> 内で <code class=\"language-text\">brew install</code> している場合は問題なく動くのですが、<code class=\"language-text\">main.yml</code> と <code class=\"language-text\">make -f brew.mk</code> の間にひとつシェルスクリプトや Makefile を挟むだけで <code class=\"language-text\">Host key verification failed.</code> <code class=\"language-text\">fatal: Could not read from remote repository.</code> で死ぬようになりました。\n具体的なドキュメントは出てきませんでしたが、おそらくセキュリティ上の都合だと思われます。\n解決策はなかったので諦めて間に何も挟まない形にしました。<code class=\"language-text\">ci.mk</code> と実機で叩くセットアップスクリプトを近い形にしておきたかったんですが、まぁ致し方ないです。</p>\n<p>[https://github.com/actions/:embed:cite]</p>","frontmatter":{"title":"macOSX 向け dotfiles を Github Actions でテストする","date":"November 21, 2019","description":null}}},"pageContext":{"slug":"/2019/11/21/213847/","previous":{"fields":{"slug":"/alpine-docker-oneliner-for-man/"},"frontmatter":{"title":"man したい alpine ワンライナー"}},"next":{"fields":{"slug":"/2019/11/21/003524/"},"frontmatter":{"title":"Selenium IDE は for each したりできるよ"}}}}}
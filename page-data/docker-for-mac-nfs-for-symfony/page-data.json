{"componentChunkName":"component---src-templates-blog-post-js","path":"/docker-for-mac-nfs-for-symfony/","result":{"data":{"site":{"siteMetadata":{"title":"なにもわからない"}},"markdownRemark":{"id":"125d245a-4dfb-5c02-8a3d-20292a6e813d","excerpt":"f:id:tamakiii:20191124095441j:plain  3日目の記事です。 昨日は  さんの 「JsonSchemaBundleを作った話」 でした。 Docker が開発環境のお供として定着したおかげでチーム内の環境差はだいぶ小さくなりました。\nしかし、Docker for Mac は APFS…","html":"<p>[f:id:tamakiii:20191124095441j:plain]</p>\n<p><a href=\"https://qiita.com/advent-calendar/2019/symfony\"><code class=\"language-text\">Symfony Advent Calendar 2019</code></a> 3日目の記事です。</p>\n<p>昨日は <a href=\"https://qiita.com/polidog\"><code class=\"language-text\">@polidog</code></a> さんの <a href=\"https://polidog.jp/2019/12/01/symfony/\">「JsonSchemaBundleを作った話」</a> でした。</p>\n<hr>\n<p>Docker が開発環境のお供として定着したおかげでチーム内の環境差はだいぶ小さくなりました。\nしかし、Docker for Mac は APFS との相性が悪く、特に Symfony プロジェクトでの DX の悪さは悩みの種でした。</p>\n<p>この問題の解決方法はいくつかありますが、個人的に NFS を使った方法が手間と効果のバランス上よいと思っています。\nDocker 標準機能の consistency <code class=\"language-text\">delegated</code> や <code class=\"language-text\">cached</code> もそれなりには効きますが、開発中の DX 的にはまだ不満が残ります。\ndocker-sync も試してみましたが動作が安定せず解決策とはなり得ませんでした。</p>\n<p>（他にも実は VMWare 上の Ubuntu で Docker を動かした方が <code class=\"language-text\">consistent</code> よりは早かったりします）</p>\n<p>既に世に情報はだいぶ出回ってはいますが、今回は特に macOS Catalina 上で快適に動く Symfony 開発環境を docker-compose と NFS で作る方法について、私的なおすすめも交えて書きます。</p>\n<p>長いので結論を先に書くと、ウェブのレスポンスが 2833 ms → 370ms に、<code class=\"language-text\">bin/console</code> の実行が最大300% ほど高速になりました。</p>\n<p>サンプルプロジェクト</p>\n<p>[https://github.com/tamakiii-sandbox/hello-symfony-5.0:embed:cite]</p>\n<!-- more -->\n<hr>\n<h2>1. NFS のかんたんな説明</h2>\n<p>NFS（Network File System）は分散ファイルシステムのひとつで、TCP/UDP で通信するサーバを立ち上げて使います。\nmacOS には標準で <code class=\"language-text\">nfsd</code> がインストールされており、OS起動時に <code class=\"language-text\">launchd</code> が <code class=\"language-text\">nfsd</code> を立ち上げるようになっています。</p>\n<p><code class=\"language-text\">nfsd</code> が起動しているかは </p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">ps aux | grep /sbin/nfsd</code></pre></div>\n<p> で、<code class=\"language-text\">launchd</code> の管理下にあるかは</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">sudo launchctl list | grep com.apple.nfs</code></pre></div>\n<p>で、NFSサーバのマウント情報は</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">showmount -e localhost</code></pre></div>\n<p>で確認できます。</p>\n<p>もしOS起動時に立ち上がらなくなってしまっていた場合は</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.nfsd.plist</code></pre></div>\n<p>で有効化できるはずです。</p>\n<hr>\n<h2>2. ホストOSのセットアップ</h2>\n<p>初回のみ以下の手順が必要です</p>\n<ul>\n<li>Full Disk Acccess を与える（Terminal, iTerm 等）</li>\n<li>/etc/exports を設定する</li>\n<li>/etc/nfs.conf を設定する</li>\n<li>OSを再起動、もしくは nfsd を再起動する</li>\n</ul>\n<h3>Full Disk Acccess を与える</h3>\n<p><code class=\"language-text\">System Preferences &gt; Security &amp; Privacy &gt; Full Disk Access</code> から追加します。</p>\n<h3>/etc/exports, /etc/nfs.conf を設定する</h3>\n<p>Catalina から SIP（System Integrity Protection） の影響で <code class=\"language-text\">/etc</code> などが <code class=\"language-text\">sudo</code> でも書けなくなりました。</p>\n<p><code class=\"language-text\">launchd</code> はユーザごとに <code class=\"language-text\">~/Library/LaunchAgents/*.plist</code> に設定が書けますが、root ユーザとしては実行できず <code class=\"language-text\">nfsd</code> が root 権限を要求するため、system の <code class=\"language-text\">nfsd</code> に読ませるために <code class=\"language-text\">/etc</code> 以下をエディタで編集する必要がありそうです。\nまた同様に <code class=\"language-text\">$HOME</code> が NFS で export できないため、<code class=\"language-text\">/System/Volumes/Users</code> 以下を export するよう設定する必要があります。</p>\n<p> <code class=\"language-text\">/etc/nfs.conf</code> には </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">nfs.server.mount.require_resv_port = 0</code></pre></div>\n<p>を足し、<code class=\"language-text\">/etc/exports</code> には</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">echo &quot;/System/Volumes/Data/Users/ -alldirs -mapall=$(id -u):$(id -g) localhost&quot;</code></pre></div>\n<p>を設定します。後述のスクリプトを使うと楽ができるかもしれません。</p>\n<p>OSを再起動するか nfsd を再起動（<code class=\"language-text\">sudo nfsd restart</code>）したらホストOSの準備は完了です。</p>\n<p><code class=\"language-text\">showmount -e localhost</code> が以下のようになっていればよいはずです。</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ showmount -e localhost\nExports list on localhost:\n/System/Volumes/Data/Users          localhost</code></pre></div>\n<hr>\n<h2>3. プロジェクトのセットアップ</h2>\n<p>チームで <code class=\"language-text\">docker-compose.yml</code> を共有する際には、<code class=\"language-text\">docker-compose.override.yml</code> を <code class=\"language-text\">.gitignore</code> して override.yml で環境差を埋めるのがおすすめです。\nまた、<code class=\"language-text\">docker-compose.yml</code> 内では <code class=\"language-text\">.env</code> の内容を変数として扱えるのがとても便利でこちらもおすすめです。可変でないものは <code class=\"language-text\">docker-compose.yml</code> の <code class=\"language-text\">environments</code> に直接定義し、<code class=\"language-text\">.env</code> は Git の管理下から外します。</p>\n<p>私の職場では Executable Document（もしくは Readable Shell Script）としてよく <code class=\"language-text\">Makefile</code> を使います。\n<code class=\"language-text\">make -f dev.mk install</code> すれば環境ができあがり、あとは個々の事情に合わせて必要なコマンドを叩くか <code class=\"language-text\">.env</code> を編集する、といった具合が頑張りすぎず丁度よいです。</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">make -f dev.mk install HTTP_PORT=8888 # &lt;= 引数で環境をカスタマイズできる\nvim .env # &lt;= あとからでもカスタマイズできる\ndocker-compose up</code></pre></div>\n<ul>\n<li><a href=\"https://github.com/tamakiii-sandbox/hello-symfony-5.0/blob/e94c114e4d4237f091d09aa933f0b18299b55cf8/dev.mk\">Makefile の例（dev.mk）</a></li>\n</ul>\n<h3>その1： NFS 使用時と非使用時でマウント方法を合わせる</h3>\n<p>通常は <code class=\"language-text\">volumes</code> でマウントしている <code class=\"language-text\">.:/project</code> 等を Volume として定義します。</p>\n<p>[https://gist.github.com/017cc52c7d2b7892934743e9705a9bac:embed#gist017cc52c7d2b7892934743e9705a9bac]</p>\n<p><code class=\"language-text\">$PWD</code> が WSL2 などでは使えないらしいので <code class=\"language-text\">.env</code> から絶対パスを読んでセットします（<code class=\"language-text\">${CURRENT_DIR}</code>）。</p>\n<p>このとき使えるテクニックとして <code class=\"language-text\">${VARIABLE:-default}</code> があります。これは <code class=\"language-text\">$VARIABLE</code> 非定義時に <code class=\"language-text\">&quot;default&quot;</code> として評価されるためデフォルト値の記述に使えます。</p>\n<h3>その2： docker-compose.override.yml に NFS の設定を書く</h3>\n<p>先程作った Volume（<code class=\"language-text\">project_volume</code>）の設定を上書きするだけです。<code class=\"language-text\">device</code> には NFS の export に合わせて <code class=\"language-text\">/System/Volumes/Data/Users</code> を使います（<code class=\"language-text\">${CURRENT_VOLUME_DIR}</code>）。</p>\n<p>[https://gist.github.com/a4156de1456b0b755f83d495deb6c4b4:embed#gista4156de1456b0b755f83d495deb6c4b4]</p>\n<p>最後に <code class=\"language-text\">.env</code> を生成したら <code class=\"language-text\">docker-compose config</code> で設定を確認します。</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">bash-3.2$ cat &lt;&lt;EOF &gt; .env\n&gt; CURRENT_DIR=$(pwd)\n&gt; CURRENT_VOLUME_DIR=$(realpath $(pwd | sed &#39;s|/Users|/System/Volumes/Data/Users|&#39;))\n&gt; EOF</code></pre></div>\n<h4>Makefile で書くと（脱線）</h4>\n<p>これを <code class=\"language-text\">Makefile</code> で書くとこうなります。既にターゲットがあれば再実行されないので、カスタマイズした設定が上書きされてしまうことも防げます。\nまた、パラメタライズしてあるので生成時のコマンドで出力ファイルがカスタマイズできます。</p>\n<p>[https://gist.github.com/059d51c35c151fc9b0e976ac71dc1eb1:embed#gist059d51c35c151fc9b0e976ac71dc1eb1]</p>\n<p>特定環境でしか使わない処理は <code class=\"language-text\">macos.mk</code> のように分けておくと管理しやすいかもしれません。</p>\n<div class=\"gatsby-highlight\" data-language=\"make\"><pre class=\"language-make\"><code class=\"language-make\">.PHONY: all clean\n\ndocker-compose.override.yml: docker/docker-compose.macos.override.yml\n    cp $&lt; $@</code></pre></div>\n<h4>Docker volume の削除</h4>\n<p>既に作成済の Docker volume は一度消して作り直す必要があります。以下のように怒られます。\nMySQL などのデータはバックアップを取った上で実行してください。</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ docker-compose run --rm php app/bin/console --version\nERROR: Configuration for volume project_volume specifies &quot;device&quot; driver_opt :/System/Volumes/Data/Users/tamakiii/Sites/tamakiii-sandbox/hello-symfony-5.0, but a volume with the same name uses a different &quot;device&quot; driver_opt (/Users/tamakiii/Sites/tamakiii-sandbox/hello-symfony-5.0). If you wish to use the new configuration, please remove the existing volume &quot;hello-symfony-50_project_volume&quot; first:\n$ docker volume rm hello-symfony-50_project_volume</code></pre></div>\n<h4>セットアップシェルスクリプト</h4>\n<p>NFS のセットアップと Docker volume の再作成、Docker の再起動までしてくれるシェルスクリプトを用意しておくと便利です。\n私が実装したものが参考になれば（注意深く）使ってみてください。</p>\n<ul>\n<li>[https://github.com/tamakiii-sandbox/hello-symfony-5.0/blob/b90044814507235af1ad858bd9988cc0d9f6b161/bin/setup<em>native</em>nfs<em>docker</em>osx.sh]</li>\n</ul>\n<p>このスクリプトは以下の記事の内容をベースに改良したものです。\nいくつか動かない箇所を直したのと、Catalina 向けに <code class=\"language-text\">/etc/exports</code> や <code class=\"language-text\">/etc/nfs.conf</code> の生成に関する処理を加えました。</p>\n<p>[https://vivait.co.uk/labs/docker-for-mac-performance-using-nfs:embed:cite]</p>\n<h2>4. 動作速度</h2>\n<p>consistency を指定する方法と比べて NFS がどの程度速いか実験しました。が、細かく書くとだいぶ長くなるので（もしかしたら後日書くかもしれませんが）割愛しますが、<code class=\"language-text\">bin/console debug:container</code> で比較して、おおよそ <code class=\"language-text\">consistent</code> に比べて300%、<code class=\"language-text\">delegated</code> に比べて180%、<code class=\"language-text\">cached</code> に比べて170% ほど高速という結果になりました。</p>\n<p>また、あまり信用にならない計測方法ですが、404 ページへのアクセスの profile 結果（Total Time）も同様の結果になりました。\n最初に NFS を導入した際の実験結果ともほぼ同様で、開発時も安定してこれくらいの速度が出ています。</p>\n<table>\n<thead>\n<tr>\n<th>consistency</th>\n<th align=\"right\">初回</th>\n<th align=\"right\">2回目</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">consistent</code></td>\n<td align=\"right\">8926 ms</td>\n<td align=\"right\">2833 ms</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">delegated</code></td>\n<td align=\"right\">3717 ms</td>\n<td align=\"right\">976 ms</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">cached</code></td>\n<td align=\"right\">4495 ms</td>\n<td align=\"right\">997 ms</td>\n</tr>\n<tr>\n<td>NFS</td>\n<td align=\"right\">2197 ms</td>\n<td align=\"right\">370 ms</td>\n</tr>\n</tbody>\n</table>\n<h2>5. 最後に</h2>\n<p>元々は仕事で使っている仕組みをそのまま伝えるだけの記事にする予定だったのですが、\n新しく買った16インチ MacBook Pro でサンプルプロジェクトを書き始めたら Catalina の辛いポイントがあったのでこういった記事になりました。\n皆さんの DX 改善の一助になれば幸いです。</p>\n<p>これから少なくとも数年は開発環境構築においては仮想環境が支配的な状況が続くと思います。\n今回のような工夫ももちろん必要なんですが、強いマシンを買って富豪的に快適な開発環境を作るとやはり最高です。</p>\n<h2>6. 検証環境</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">macOS Catalina（Version 10.15.1）\nMacBook Pro (16-inch, 2019)\nProcessor: 2.3 GHz 8-Core Intel Core i9\nMemory: 64 GB 2667 MHz DDR4\nStartup: Disk Macintosh HD\nGraphics: Intel UHD Graphics 630 1536 MB</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Docker desktop community\nVersion: 2.1.0.5 (40693)\nChannel: stable\nEngine: 19.03.5\nCompose: 1.24.1</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Disk image: Docker.raw\nDisk image size: 64.0 GB (16.1 GB on disk)\nCPUs: 8\nMemory: 16.0 GiB\nSwap: 4.0 GB</code></pre></div>","frontmatter":{"title":"Docker for Mac でも快適な Symfony 開発環境を作りたい","date":"December 04, 2019","description":null}}},"pageContext":{"slug":"/docker-for-mac-nfs-for-symfony/","previous":{"fields":{"slug":"/2019/11/21/001343/"},"frontmatter":{"title":"jq で特定条件にマッチする要素を置換する"}},"next":{"fields":{"slug":"/2020/02/11/191548/"},"frontmatter":{"title":"alpineのapkで古いpackageを指定してインストールする"}}}}}
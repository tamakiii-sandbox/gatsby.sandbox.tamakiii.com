{"componentChunkName":"component---src-templates-blog-post-js","path":"/ajitofm-23/","result":{"data":{"site":{"siteMetadata":{"title":"なにもわからない"}},"markdownRemark":{"id":"fe04b436-8a87-5c44-99eb-c79a21657dae","excerpt":"ajito.fm は VOYAGE GROUP の社内バー AJITO の名を冠したテック系 Podcast です。 今週公開された最新話の23回では、テストの伝道師で講演者としても知られる @t_wada…","html":"<p><a href=\"https://ajito.fm\">ajito.fm</a> は <a href=\"https://voyagegroup.com/\">VOYAGE GROUP</a> の社内バー AJITO の名を冠したテック系 Podcast です。</p>\n<p>今週公開された最新話の23回では、テストの伝道師で講演者としても知られる <a href=\"https://twitter.com/t_wada\">@t_wada</a> さんが、プレゼンテーションや講演の作り方などについて話されていました。\nこんなに価値のある情報を開けっ広げにしていいのか？！と思える内容だったので、個人的にその内容を文字起こししてみました。</p>\n<p>（t_wada さんは既に何度かご登場されていて、金言がバンバン出るのは毎回なのですが。ぜひ過去回も聴いてみてください）</p>\n<p>[https://ajito.fm/23/:embed:cite]</p>\n<hr>\n<h2>目次</h2>\n<ul>\n<li>\n<p><strong>学びの話</strong></p>\n<ul>\n<li>新入社員研修</li>\n<li>t_wada さんの学び方の変化</li>\n<li>「教える」ことから得られる学びは多い</li>\n<li>「教える」を避けるのはもったいない</li>\n<li>類似の情報であっても情報発信には価値がある</li>\n<li>「ゴミエントリー」にしない工夫</li>\n</ul>\n</li>\n<li>\n<p><strong>講演の話</strong></p>\n<ul>\n<li>「技術選定の審美眼」</li>\n<li>講演の準備／資料の作り方とコツ</li>\n<li>プレゼンテーションの基本</li>\n<li>聴く人の明日がどう変わるかに力を込めろ</li>\n<li>「PHP7 で堅牢なコードを書く」</li>\n<li>「PHP7 で堅牢なコードを書く」の作り方</li>\n<li>講演のコツ</li>\n<li>資料が独り歩きを始めても講演の目標が達成できるかまで考えたい</li>\n<li>「技術力の審美眼」は直前まで名前や構成を練ることに時間を使った</li>\n</ul>\n</li>\n<li>\n<p><strong>過去回</strong></p>\n<ul>\n<li>リンク</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2>学びの話</h2>\n<h3>新入社員向研修</h3>\n<ul>\n<li>\n<p>春は新人研修の公演依頼をされることが多い</p>\n<ul>\n<li>一番多いのはプログラマ、エンジニアとしての心構え</li>\n</ul>\n</li>\n<li>「勉強の学び方を学ぶ」みたいなメタな話</li>\n<li>\n<p><strong>プログラマ・エンジニアとして生きる＝「ずっと勉強し続ける」ということ</strong></p>\n<ul>\n<li>自由になる時間は年々減って行く</li>\n<li>学習自体を効率化できないと自分が積んでしまう時がやってくる</li>\n</ul>\n</li>\n<li>\n<p>どうやって効率的に学びを続けて行くか？</p>\n<ul>\n<li>メタな視点だと「勉強の仕方を勉強する」</li>\n<li>教育学とかにヒントがある</li>\n</ul>\n</li>\n</ul>\n<h3>t_wada さんの学び方の変化</h3>\n<ul>\n<li>\n<p><strong>「フィードバックサイクルをうまく構築して回せれば学びは上手く行く」</strong> と経験的に気づいた</p>\n<ul>\n<li>アウトプットするとインプットがよりやってくる</li>\n<li>ブログ記事を書くとインプットがやってくる</li>\n<li>勉強会で発表すると、次のインプットやアウトプットに繋がって回って行く</li>\n</ul>\n</li>\n<li>世の中に出て発表とかを始めたら、それが自分の勉強になることに気づいた</li>\n<li>経験的に学んだことを整理して「こうするとうまく学びが回るかもしれないよ」ということをやっている</li>\n</ul>\n<h3>「教える」ことから得られる学びは多い</h3>\n<ul>\n<li>WEB+DB PRESS Vol.102 でペアプロの記事を書いた</li>\n<li>\n<p>ペアプロで経験や技能の差があるとき、上の人にメリットはあるか？</p>\n<ul>\n<li>すごくある。 <strong>教えてる側の方がずっと学んでる</strong></li>\n<li>「教えることは最大の学びである」色んな人が言っている（ファインマンさんとか）</li>\n</ul>\n</li>\n<li>\n<p><strong>再整理してリフレーズしないと教えられない</strong></p>\n<ul>\n<li>自分の知識の整理になる</li>\n</ul>\n</li>\n<li>\n<p>大学受験のテクニックの一つ＝「塾の講師のアルバイトをする」</p>\n<ul>\n<li>知識が体系化されて再整理される</li>\n</ul>\n</li>\n</ul>\n<p>[http://gihyo.jp/magazine/wdpress/archive/2018/vol102:embed:cite]\n[asin:4006030053:detail]</p>\n<h3>「教える」を避けるのはもったいない</h3>\n<ul>\n<li>\n<p>“教える” と言うと「上から目線になっちゃう」と考えちゃいがち</p>\n<ul>\n<li>自分が分かること／知ってることを、話すとか、伝えるとかでいい</li>\n<li>ブログエントリーでもいいし、Qiitaのエントリーでもいいし</li>\n<li>自分の言葉でアウトプットしてみる</li>\n</ul>\n</li>\n<li>\n<p>「自分は教える立場にないレベルにない」という感情をセーブしたり捨てるのが大事</p>\n<ul>\n<li><strong>実は自分が一番勉強になってるじゃん、というのを体験してほしい</strong></li>\n</ul>\n</li>\n<li>自己評価の不思議な低さみたいなものは、アウトプットとインプットのループが回らないので勿体無いなぁと思っている</li>\n</ul>\n<h3>類似の情報であっても情報発信には価値がある</h3>\n<ul>\n<li>\n<p>類似の情報があっても今日情報発信することには価値がある</p>\n<ul>\n<li>ある OSS の作者が ver.1.0 のリリース時にブログ記事を書いたとする</li>\n<li>「何故作ったのか」「何を解こうとしているのか」とか、“なぜなに” は当人しか書けないかもしれない</li>\n<li>もしそれが4年前のブログエントリーだったりとかしたら、いまこれ動くのか？</li>\n</ul>\n</li>\n<li>\n<p>現代のソフトウェアを構成しているコンポーネントの数は多いので端々から壊れて行く</p>\n<ul>\n<li>皆が再体験するのではなく、小さな地雷みたいなのを除去してゆくエントリーには価値がある</li>\n</ul>\n</li>\n<li>\n<p>論文の世界ではやっぱり新規性が大事。工学や実学の世界では実用性が大事。</p>\n<ul>\n<li>もちろん、エンジニアリングの世界であっても一番先に情報を出すのは尊い</li>\n</ul>\n</li>\n<li>「今日では別の要素が出てきたので有用ではありません」という内容も有用</li>\n<li>なので <strong>類似の情報であっても、それを世に出すことに後ろ向きにならないで欲しい</strong></li>\n</ul>\n<h3>「ゴミエントリー」にしない工夫</h3>\n<ul>\n<li>エントリーの信頼性を高めるには情報の抑え方が重要</li>\n<li>\n<p>例えば</p>\n<ul>\n<li>詳細はむしろ省略しないで記す</li>\n<li>バージョン情報を明記する</li>\n<li>ひとつひとつの再現可能性を意識する</li>\n<li>再現可能なステップを意識する</li>\n</ul>\n</li>\n</ul>\n<h2>講演の話</h2>\n<h3>「技術選定の審美眼」</h3>\n<ul>\n<li>\n<p>t_wada さんは、講演者としては再演の多い講演者</p>\n<ul>\n<li>コミュニティでやったものの再演依頼が多い</li>\n</ul>\n</li>\n<li>\n<p>新作の題材の決め方</p>\n<ul>\n<li>どんなテーマのイベントかとか、ある程度の方向性がある</li>\n<li>自分の持ってること、話したいこと、テーマの整合性を付けつつ作って行く</li>\n</ul>\n</li>\n<li>講演していると再利用可能なページが増える</li>\n<li>\n<p>「技術選定の審美眼」は完全新作</p>\n<ul>\n<li>実際にかかった期間は年末から本番まで3ヶ月くらい</li>\n<li>スライドの組み立て大変だったのでは？</li>\n<li>難産だったし、プレッシャーが高かった</li>\n<li>時々、新人研修で技術の進化の歴史は振り子のように見えて螺旋なんだよという話をする</li>\n<li>これについてフォーカスして話してほしいという依頼を承った</li>\n<li>ヤバい、テーマがとても大きい、失敗したときもリスクも高いなぁと</li>\n<li>螺旋の話と、devsumi 2018テーマ「変わるもの×変わらないもの」を主軸に</li>\n<li>技術の歴史というのはある周期で繰り返しているように見えても完全な繰り返しではなく、決定的な技術の変化とかを経て進化しているもので、ベテランには揺り戻しがあるように見える、という話</li>\n</ul>\n</li>\n<li>経験として、 <strong>やや背伸びした講演から得られる成長機会はとても大きい</strong></li>\n</ul>\n<p>[https://speakerdeck.com/twada/understanding-the-spiral-of-technologies:embed:cite]\n[https://event.shoeisha.jp/devsumi/20180215:embed:cite]</p>\n<h3>講演の準備／資料の作り方とコツ</h3>\n<ul>\n<li>\n<p><strong>完成品としての講演の中身は、本番直前のテンションでまとまって行くもの</strong></p>\n<ul>\n<li>資料が出来上がるのは直前</li>\n<li>体感的には時間の8割はメモしている時間</li>\n<li>本番の3ヶ月前に依頼をもらったとして、ネタ集めの期間が2ヶ月半</li>\n</ul>\n</li>\n<li>\n<p><strong>公演資料を作るコツ＝「講演資料を作り始めないこと」</strong></p>\n<ul>\n<li>スライド作りに着手するのは早すぎても遅すぎてもいけない</li>\n<li>特に大きめの舞台で講演するときは、いきなりプレゼン資料を作り始めないのが大事</li>\n<li><strong>考えるべきはテーマ設定とかメッセージ</strong></li>\n</ul>\n</li>\n<li>\n<p>発散フェーズが続く</p>\n<ul>\n<li>simplenote に「デブサミ2018」みたいなノートを作って、何か思いついたものを全てそこに書いている</li>\n<li>こんなことを喋れる、こんなことを喋りたい</li>\n<li>散歩してるときとか、本屋行ったときとかに思いつく</li>\n<li>体験として大きかったのは「大きめの本屋の技術書コーナー」</li>\n<li>古い本から新しい本まである、背表紙に技術の歴史が見える</li>\n<li>イメージが湧く → ただひたすらメモを取る</li>\n</ul>\n</li>\n<li>\n<p>発散からだんだん収縮させて行く</p>\n<ul>\n<li>ネタをひたすら集めると同時に、構成・骨組みを考える</li>\n<li>大事なメッセージは何だろうか？</li>\n<li>聞いて下さるお客さんに一番伝えたいのは？</li>\n<li>持って帰って貰えるものは？</li>\n</ul>\n</li>\n<li>骨組みに合わせてパーツを当てはめて行く</li>\n<li>\n<p>自分に合った道具を使う</p>\n<ul>\n<li>最近はスマホでメモしているけど、以前はスケッチブックでマインドマップでメモを書いていた</li>\n<li>ふとしたときに思いついたときに、スケッチブックが手元になかったりした</li>\n<li>とにかくメモを収集できるデバイスに</li>\n<li>すぐ忘れちゃう、基本的に単語だけ</li>\n</ul>\n</li>\n</ul>\n<p>[https://simplenote.com/:embed:cite]\n[https://atom.io/packages/markdown-mindmap:embed:cite]</p>\n<h3>プレゼンテーションの基本</h3>\n<ul>\n<li>\n<p>参考にしてる本＝『スティーブ・ジョブズ驚異のプレゼン』</p>\n<ul>\n<li>タイトルも表紙も信者くさくて人に勧めづらいけど、中身はとってもよい</li>\n</ul>\n</li>\n<li>\n<p><strong>プレゼンテーションの基本＝「ストーリーを作る、一番大事な問いに答える」</strong></p>\n<ul>\n<li>抑えていないとどんな綺麗な資料でも外れだし、抑えていれば文字だけでもいい</li>\n<li>そういった抑えるべきところを抑えている本</li>\n</ul>\n</li>\n<li>\n<p><strong>ディレクターズノートをいつでも見れるように書き出してあって、毎回穴埋めをする</strong></p>\n<ul>\n<li>⇒ 各章の最後にあるその章のまとめみたいなもの</li>\n<li>第一章</li>\n<li>「構想はアナログでまとめろ」</li>\n<li>「プレゼンテーションソフトを開く前によく考えて流れを作ること」</li>\n<li>「アイディアは紙やホワイトボードに書く」</li>\n<li>\n<p>「生き生きとしたプレゼンテーションとするため、以下の9要素からなるべく多くを取り入れること」</p>\n<ul>\n<li>“ヘッドライン”</li>\n<li>“ファッションステートメント”</li>\n<li>“3つのキーメッセージ”</li>\n<li>などなど</li>\n</ul>\n</li>\n<li>「どのプレゼンテーションソフトを使うかではなく、どういうストーリーを作ってどう発表するかが一番大事だ」</li>\n<li>第二章</li>\n<li>「一番大事な問いに答える」</li>\n<li>「聞き手はなぜアイディアや情報・製品に注視を払うべきなのか自問する」</li>\n<li>「何故皆さんは自分の話を聞きに来る意味があるのかに集中しよう」</li>\n<li>「その選んだポイントを明快に伝えよう」</li>\n</ul>\n</li>\n</ul>\n<p>[asin:482224816X:detail]</p>\n<h3>聴く人の明日からがどう変わるのかに力を込めろ</h3>\n<ul>\n<li>技術の話をするのではなく、話を通じて聴く人の日々がどう良くなるか、どう改善されるか、何が大事なのか、何が嬉しいのか、といった立場に立って話をしよう</li>\n<li>\n<p>講演の度に毎回考え直す</p>\n<ul>\n<li><strong>話せそうなことを羅列すると、ただ自分が知ってることが羅列された資料になってしまう</strong></li>\n</ul>\n</li>\n<li>\n<p>聞いた人がどうするのかが踏み込み不足になりがち</p>\n<ul>\n<li>聞いてもらえることによって、行動が変わるとか考えが変わるとか、何らかの影響をどう持って返ってもらうかに集中しよう</li>\n<li>そういう観点で自分のメモ書きや資料を見直すと、ちょっと視点が違うとか足りないことに気づく</li>\n<li>ディレクターズノートの穴埋めに立ち戻る</li>\n</ul>\n</li>\n<li>\n<p>意識しないとどうしても忘れがち</p>\n<ul>\n<li><strong>自分ができていることを整理して資料にまとめる、というのは魅力的で引力を伴うのだけど、もう一歩踏み込んで</strong></li>\n</ul>\n</li>\n<li>\n<p>何を伝えたいのかをよりシャープにするために、毎回穴埋めして作り直している</p>\n<ul>\n<li>今回の講演はキーメッセージができているかな？</li>\n<li>この講演で明日は変わるだろうか？</li>\n</ul>\n</li>\n</ul>\n<h3>「PHP7 で堅牢なコードを書く」</h3>\n<ul>\n<li>\n<p>実際の「防御的プログラミング」とか「表明プログラミング」とか「制約による設計」という概念を対応付けて説明したい</p>\n<ul>\n<li>ソースコードをある程度登場させたい</li>\n</ul>\n</li>\n<li>\n<p>「実例としてのコード」と「理論やテクニック・プラクティス」が分けて書かれてしまっている事が多い</p>\n<ul>\n<li>「制約による設計」というのはこういう考え方である、は書いてあるけど、実際にはどう書くの？</li>\n</ul>\n</li>\n<li>\n<p>コードも合わせて読めるようにしたい</p>\n<ul>\n<li>そこで、コードを十分に登場させながら、かつ書籍の引用を出典も含めて示しながら、全体を構成して行きたい</li>\n</ul>\n</li>\n</ul>\n<p>[https://speakerdeck.com/twada/php-conference-2016:embed:cite]\n[http://phpcon.php.gr.jp/2016/:embed:cite]</p>\n<h3>「PHP7 で堅牢なコードを書く」の作り方</h3>\n<ul>\n<li>「PHP7 で堅牢なコードを書く」の説明の仕方は、普段の雑誌とかの原稿の書き方と同じ</li>\n<li>\n<p>最初にテーマ設定がある</p>\n<ul>\n<li>「（賢明なソフトウェア技術者になるための第一歩は）動くプログラムを書くことと、正しいプログラムを適切に作成することの違いを認識すること」（M.A. Jackson）</li>\n<li>これをグランドテーマとした</li>\n</ul>\n</li>\n<li>\n<p>説明したい概念が多い</p>\n<ul>\n<li>「防御的プログラミング」「表明プログラミング」「制約による設計」</li>\n<li>ある程度、説得力のあるサンプルコードが必要</li>\n<li>サンプルがないと具体例として伝えにくい</li>\n<li>サンプルコードは画面内に収めなければならない、という大きな制約がある</li>\n<li>時間的な制約もある</li>\n</ul>\n</li>\n<li>\n<p>言えることはたくさんある</p>\n<ul>\n<li>喋らなきゃいけないことは古典から引用できるので多い</li>\n<li>どうやって説得力のある形でパッケージングするかが大事だった</li>\n<li>サンプルコードを何パターンも作って、どれが無理なく流れを説明できるか、枝刈りをして行った</li>\n<li>「サンプルコードが成長して行く」を講演の骨組みにして、それに説明を散りばめて行くことにした</li>\n</ul>\n</li>\n<li>\n<p>結果的には SQL アンチパターンのより悪い形から始まってゴールに向かって行く構成になった</p>\n<ul>\n<li>「サンプルコードがだんだん良くなって行く様を追体験して、多くの人に理解してもらう」という方法が得意でよく用いる</li>\n</ul>\n</li>\n</ul>\n<p>[asin:4839921946:detail]</p>\n<h3>講演のコツ</h3>\n<ul>\n<li>オープニングは重要</li>\n<li>\n<p>聴く人に自分事だと認識してもらうのが大事</p>\n<ul>\n<li>自分のことであるとか、持って帰れるものがあるとか、“あるある” と思ってもらう</li>\n</ul>\n</li>\n<li>\n<p><strong>一番最初に「なぜこの講演を聴く必要があるのか」を印象付けたい</strong></p>\n<ul>\n<li>痛みを追体験してもらう／痛みを仮想的に体験してもらう</li>\n</ul>\n</li>\n<li>\n<p>PHPカンファレンスでは、いきなりクイズを出した</p>\n<ul>\n<li>ひどいコードを見せて「実行時例外の原因になる可能性があるのはどの行でしょうか？」「制限時間は10秒です」</li>\n<li>強制的に目の前の問題に皆さんに集中してもらう効果</li>\n</ul>\n</li>\n<li>\n<p>防御的プログラミングとかエラー処理がなされていないコードというのは、どんなコードでどういった痛みを伴うのか？</p>\n<ul>\n<li>経験のある人には分かるが、経験のない人は分からない</li>\n<li>最初の数分で「このひどいコードからこんなにエラーの可能性があるのか」を強制的に追体験してもらう</li>\n<li>一気に同じ船に乗ってもらう構成</li>\n</ul>\n</li>\n<li>\n<p>感情面での揺さぶりというか、共感とか一種の強迫観念とか、そういったものを喚起することで自分のスライドに乗っかってもらう</p>\n<ul>\n<li>あるあるとか、これはつらいとか</li>\n<li>そういったいろんな感情がでてくる</li>\n</ul>\n</li>\n<li>プレゼンの作り方ってあまり話さないし、あんまり自覚的にならない</li>\n</ul>\n<p>[asin:462106603X:detail]</p>\n<h3>資料が独り歩きを始めても講演の目標が達成できるかまで考えたい</h3>\n<ul>\n<li>\n<p>大舞台で話す場合、演者のパフォーマンスも含めてプレゼンテーション</p>\n<ul>\n<li>プレゼンテーションを印象付けるのがとても大事</li>\n<li>大きな写真だけとか、文字だけとかのスタイルもある（ex. プレゼンテーションzen）</li>\n<li>それは大舞台のその場にいる人に全ての価値を集中する、という講演と資料の設計</li>\n<li>今日のエンジニア・プログラマの講演／発表は本番だけじゃない</li>\n</ul>\n</li>\n<li>\n<p>資料は基本的にオープンに公開されるもので、公開されたものは喋りと切り離されて資料だけが独り歩きする</p>\n<ul>\n<li>画像1個だけだと詰んでしまう</li>\n<li>「印象のよくわからない資料だな」と思われてしまう</li>\n</ul>\n</li>\n<li>\n<p>勝負のときは少なくとも2つある</p>\n<ul>\n<li>「本番の壇上」と「後の資料公開」</li>\n</ul>\n</li>\n<li>\n<p><strong>資料が独り歩きを始めても講演の目標が達成できるかまで考えたい</strong></p>\n<ul>\n<li>きちんと情報を伝えられるか</li>\n<li>多くの人にとって考える切っ掛けになるか</li>\n<li>行動を変えるか</li>\n</ul>\n</li>\n<li>\n<p>画や文字だけの資料は、場と演者が伴わないと情報が伝えられないので、公開資料には向かない</p>\n<ul>\n<li>そういう資料を作りたいなら公開用資料は別途作りましょうという話になる</li>\n</ul>\n</li>\n</ul>\n<h3>「技術選定の審美眼」は直前まで内容や構成を練ることに時間を使った</h3>\n<ul>\n<li>\n<p>「技術選定の審美眼」はまだ「喋りがなくても」の段階まで達していない</p>\n<ul>\n<li>再演を経て改善されて行くもので、まだ発展途上</li>\n</ul>\n</li>\n<li>\n<p>今回は普段使っている Keynote を使っていない</p>\n<ul>\n<li>Keynote をバリバリ使ってるものと比べると、というのはある</li>\n</ul>\n</li>\n<li>\n<p>Markdown からプレゼンテーションを生成するツールを使っている</p>\n<ul>\n<li>直前まで難産したのもあって、ギリギリまで作り込まずに文字情報としての内容や構成を練ることに時間を使いたかった</li>\n<li>Keynote を最後まで開かずに、メモ書きをだんだんまとめていってツリー構造にして</li>\n<li>それをプレゼンとして生成して、ちょっと CSS を書いて</li>\n<li>みたいな感じで本番に至った</li>\n</ul>\n</li>\n</ul>\n<h2>過去回</h2>\n<p>[https://ajito.fm/23/:embed:cite]\n[https://ajito.fm/13/:embed:cite]\n[https://ajito.fm/6/:embed:cite]</p>","frontmatter":{"title":"ajito.fm/23 を聴いて：「学びの話」「講演の話」","date":"April 21, 2018","description":"ajito.fm は VOYAGE GROUP の社内バー AJITO の名を冠したテック系 Podcast です。今週公開された最新話の23回では、テストの伝道師で講演者としても知られる @t_wada さんが、プレゼンテーションや講演の作り方などについて話されていました。 こんなに価値のある情報を開けっ広げにしていいのか？！と思える内容だったので、個人的にその内容を文字起こししてみました。"}}},"pageContext":{"slug":"/ajitofm-23/","previous":null,"next":{"fields":{"slug":"/2018/06/27/224308/"},"frontmatter":{"title":"Amazon Linux 2 on Amazon Workspaces"}}}}}
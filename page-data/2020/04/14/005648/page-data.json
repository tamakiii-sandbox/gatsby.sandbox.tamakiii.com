{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020/04/14/005648/","result":{"data":{"site":{"siteMetadata":{"title":"なにもわからない"}},"markdownRemark":{"id":"3951ed0c-5b66-5fd5-9312-262b40a94c00","excerpt":"docker-compose.yml で、シェルでよくある  記法が使えるのがあまり知られていないようだったので書きます。\nhttps://www.debuntu.org/how-to-bash-parameter-expansion-and-default-values/:embed:cite…","html":"<p>docker-compose.yml で、シェルでよくある <code class=\"language-text\">${VAR:-default}</code> 記法が使えるのがあまり知られていないようだったので書きます。\n[https://www.debuntu.org/how-to-bash-parameter-expansion-and-default-values/:embed:cite]</p>\n<p>サンプルプロジェクトはこちらです\n[https://github.com/tamakiii-sandbox/docker-compose-variable:embed:cite]</p>\n<hr>\n<p>PHP が動く Dockerfile と</p>\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token comment\"># Dockerfile</span>\n<span class=\"token keyword\">FROM</span> docker.io/php<span class=\"token punctuation\">:</span>7.2.29<span class=\"token punctuation\">-</span>cli</code></pre></div>\n<p>それを使う docker-compose.yml を用意します。今回はサービスは1つです。</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># docker-compose.yml</span>\n<span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"3.7\"</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">php</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">context</span><span class=\"token punctuation\">:</span> .\n    <span class=\"token key atrule\">working_dir</span><span class=\"token punctuation\">:</span> /app\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> .<span class=\"token punctuation\">:</span>/app</code></pre></div>\n<p>動かすプログラム <code class=\"language-text\">src/main.php</code> は環境変数 <code class=\"language-text\">$MESSAGE</code> を出力するだけです。</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$_ENV</span><span class=\"token punctuation\">[</span><span class=\"token double-quoted-string string\">\"MESSAGE\"</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">.</span> <span class=\"token constant\">PHP_EOL</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p>Dockerfile で <code class=\"language-text\">ENV MESSAGE &quot;hello&quot;</code> として</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">FROM</span> docker.io/php<span class=\"token punctuation\">:</span>7.2.29<span class=\"token punctuation\">-</span>cli\n\n<span class=\"token keyword\">ENV</span> MESSAGE <span class=\"token string\">\"hello\"</span></code></pre></div>\n<p>これを実行すると、<code class=\"language-text\">ENV</code> した hello が出力されます。</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ docker-compose run --rm php php src/main.php\nhello</code></pre></div>\n<p>これは環境変数なので当然シェルも同様です</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ docker-compose run --rm php sh -c &#39;echo $MESSAGE&#39;\nhello</code></pre></div>\n<p>docker-compose.yml で <code class=\"language-text\">environment</code> に表題の <code class=\"language-text\">MESSAGE: ${MESSAGE:-holla}</code> とすると</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token coord\">--- a/docker-compose.yml</span>\n<span class=\"token coord\">+++ b/docker-compose.yml</span>\n@@ -3,6 +3,8 @@ services:\n<span class=\"token unchanged\">   php:\n     build:\n       context: .\n</span><span class=\"token inserted-sign inserted\">+    environment:\n+      MESSAGE: ${MESSAGE:-holla}\n</span><span class=\"token unchanged\">     working_dir: /app\n     volumes:\n       - .:/app</span></code></pre></div>\n<p>デフォルト値の holla が出力されます</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ docker-compose run --rm php php src/main.php\nholla</code></pre></div>\n<p><code class=\"language-text\">-e</code> を指定するとこちらが優先されます</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ docker-compose run --help | grep -- &quot;-e KEY=VAL&quot;\n    run [options] [-v VOLUME...] [-p PORT...] [-e KEY=VAL...] [-l KEY=VALUE...]\n    -e KEY=VAL            Set an environment variable (can be used multiple times)\n$ docker-compose run --rm -e MESSAGE=ciao php php src/main.php\nciao</code></pre></div>\n<p><code class=\"language-text\">.env</code> を docker-compose が勝手に読むので、状態を <code class=\"language-text\">.env</code> に保持しておけます</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ echo &quot;MESSAGE=haisai&quot; &gt; .env\n\n$ docker-compose run --rm php php src/main.php\nhaisai</code></pre></div>\n<p>さて、ここで開発用にgitやvimを入れたくなった気持ちになってみます。</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token coord\">--- a/Dockerfile</span>\n<span class=\"token coord\">+++ b/Dockerfile</span>\n<span class=\"token coord\">@@ -1,3 +1,10 @@</span>\n<span class=\"token unchanged\"> FROM docker.io/php:7.2.29-cli\n</span>\n<span class=\"token inserted-sign inserted\">+RUN apt-get update &amp;&amp; \\\n+    apt-get install -y \\\n+      vim \\\n+      git \\\n+      &amp;&amp; \\\n+    apt-get clean\n+\n</span><span class=\"token unchanged\"> ENV MESSAGE \"hello\"</span></code></pre></div>\n<p>本番稼働時は要らないですよね</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ docker-compose build\nBuilding php\nStep 1/4 : FROM docker.io/php:7.2.29-cli\n ---&gt; e7d2518687da\nStep 2/4 : ENV MESSAGE &quot;hello&quot;\n ---&gt; Using cache\n ---&gt; 51c63dafa792\n\nStep 3/4 : FROM production-pseudo AS development\n ---&gt; 51c63dafa792\nStep 4/4 : RUN apt-get update &amp;&amp;     apt-get install -y       vim       git       &amp;&amp;     apt-get clean\n ---&gt; Using cache\n ---&gt; 964a4048e6ab</code></pre></div>\n<p>そんなときは <a href=\"https://docs.docker.com/engine/reference/commandline/build/#specifying-target-build-stage---target\">target build stages</a> の出番です。\n<code class=\"language-text\">production-pseudo</code> はまだ本番稼働していない疑似本番環境を表す語として使っています。</p>\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token keyword\">FROM</span> docker.io/php<span class=\"token punctuation\">:</span>7.2.29<span class=\"token punctuation\">-</span>cli AS production<span class=\"token punctuation\">-</span>pseudo\n\n<span class=\"token keyword\">RUN</span> <span class=\"token comment\"># ここに本番で要るものだけインストールする</span>\n\n<span class=\"token comment\"># --</span>\n\n<span class=\"token keyword\">FROM</span> production<span class=\"token punctuation\">-</span>pseudo AS development\n\n<span class=\"token keyword\">RUN</span> apt<span class=\"token punctuation\">-</span>get update &amp;&amp; \\\n    apt<span class=\"token punctuation\">-</span>get install <span class=\"token punctuation\">-</span>y \\\n      vim \\\n      git \\\n      &amp;&amp; \\\n    apt<span class=\"token punctuation\">-</span>get clean</code></pre></div>\n<p>これで <code class=\"language-text\">TARGET=production-pseudo</code> 時はvimやgitをインストールしなくなりました</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ docker-compose build\nBuilding php\nStep 1/2 : FROM docker.io/php:7.2.29-cli AS production-pseudo\n ---&gt; e7d2518687da\nStep 2/2 : ENV MESSAGE &quot;hello&quot;\n ---&gt; Using cache\n ---&gt; 51c63dafa792\n\nSuccessfully built 51c63dafa792\nSuccessfully tagged docker-compose-variable_php:latest</code></pre></div>\n<p><code class=\"language-text\">TARGET=development</code> 時はインストールされます</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ echo &quot;TARGET=development&quot; &gt; .env\n\n$ docker-compose build\nBuilding php\nStep 1/4 : FROM docker.io/php:7.2.29-cli AS production-pseudo\n ---&gt; e7d2518687da\nStep 2/4 : ENV MESSAGE &quot;hello&quot;\n ---&gt; Using cache\n ---&gt; 51c63dafa792\n\nStep 3/4 : FROM production-pseudo AS development\n ---&gt; 51c63dafa792\nStep 4/4 : RUN apt-get update &amp;&amp;     apt-get install -y       vim       git       &amp;&amp;     apt-get clean\n ---&gt; Running in 36bcf0f189fe\n\n$ docker-compose run --rm php which git\n/usr/bin/git</code></pre></div>\n<p>これに VSCode の Remote Containers 拡張用を合わせて使うと相性が良いです。\n<code class=\"language-text\">FROM development AS debug</code> として XDebug をインストールする、といった使い方もできます（それなりに重いので）。</p>\n<p>が、話が長くなるのでこれについてはまた次回書きます。</p>\n<hr>\n<p>ちなみに今回、 <code class=\"language-text\">.env</code> を作ったりする <code class=\"language-text\">docker.mk</code> はこの様になりました</p>\n<div class=\"gatsby-highlight\" data-language=\"make\"><pre class=\"language-make\"><code class=\"language-make\">.PHONY: install install-dev development clean\n\nTARGET := production-pseudo\n\ninstall: \\\n\t.env \\\n\tbuild\n\ninstall-dev: \\\n\tdevelopment \\\n\tinstall\n\ndevelopment:\n\t$(eval TARGET := development)\n\n.env:\n\ttouch $@\n\techo &quot;TARGET=$(TARGET)&quot; &gt;&gt; $@\n\nbuild:\n\tdocker-compose build\n\nclean:\n\trm -rf .env</code></pre></div>","frontmatter":{"title":"docker-compose の ${VAR:-default} 記法と .env で開発＆本番環境を設計する","date":"April 14, 2020","description":null}}},"pageContext":{"slug":"/2020/04/14/005648/","previous":{"fields":{"slug":"/2020/02/11/191548/"},"frontmatter":{"title":"alpineのapkで古いpackageを指定してインストールする"}},"next":null}}}